Design philosophy
==================

Docpicture should be thought of primarily as an enhanced alternative to the
standard Python help.  As such, it should display information generated
on the fly, with no need to create temporary files (to hold pictures, for
example).

The "no external file" does not preclude embedding already existing files or
inserting links to such.

Also, give the possibility to generate a single file as output,
instead of a live display.

To do
======

1. include warning when docpicture directive is found, but no corresponding
parser exists. DONE
2. Investigate using the API to reach http://www.websequencediagrams.com/
to embed graphics generated "live".  DONE
3. Have graphics generated by parser embedded in file being viewed.  DONE.

--- above (and more) done by version 0.2 ---


4. adapt aafigure.


5. Refactor the code.
6. Review the plugin call to make it more flexible; for example, images
from local path need a reference to the object being viewed.  Use
keyword args to specify further what is needed (pass the object being
viewed to the parser - should cover all cases).
7. Have the demo in a separate function.
8. Command line option to open a text file and process it to create an xhtml file
with embedded graphics.
9. Command line option to open a python file and process it, to create an xhtml
file with embedded graphics.
10. Command line option to call the demo.
11. Have the demo scan the examples directory and do each file in turn.
11a. examples should have a string called demo (?) that would be printed before/after
each test is processed.
12. Write docs about what is needed by a plugin.
